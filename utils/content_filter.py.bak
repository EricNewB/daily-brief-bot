"""Content filtering utility using Claude API with persistent memory"""
import os
import json
from typing import List, Dict, Any
import logging
from dotenv import load_dotenv
from datetime import datetime, timedelta
import re
from tenacity import retry, stop_after_attempt, wait_exponential
import sqlite3
from pathlib import Path

load_dotenv()
logger = logging.getLogger(__name__)

class ContentFilter:
    def __init__(self):
        self.api_key = os.getenv("ANTHROPIC_API_KEY")
        self._init_database()
        self.PROMPT_TEMPLATE = """Analyze and select the most valuable content from the provided sources, considering both current content and historical context:

1. Return EXACTLY 5 items total
2. Include content from ALL available sources
3. Evaluate based on:
   - Technical depth and insights
   - Practical value and applicability
   - Current relevance and impact
   - Source reliability and authority
   - Historical context and trends
   - User engagement patterns

Current content to analyze: %s

Historical context: %s

Return ONLY a JSON array with exactly 5 items. Each item must include:
- original_source
- original_title 
- original_url
- value_summary (max 100 chars)
- selection_reason (brief explanation of why this content was selected)"""

    def _init_database(self):
        """Initialize SQLite database for persistent storage"""
        db_path = Path(os.path.dirname(__file__)) / "content_history.db"
        self.db_path = db_path
        
        with sqlite3.connect(str(db_path)) as conn:
            c = conn.cursor()
            
            # Content history table
            c.execute('''CREATE TABLE IF NOT EXISTS content_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                original_source TEXT,
                original_title TEXT,
                original_url TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                content_hash TEXT UNIQUE,
                engagement_score REAL,
                selection_count INTEGER DEFAULT 0
            )''')
            
            # Selection patterns table
            c.execute('''CREATE TABLE IF NOT EXISTS selection_patterns (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                pattern_type TEXT,
                pattern_value TEXT,
                success_count INTEGER DEFAULT 0,
                last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
            )''')
            
            conn.commit()
            
# ... [Rest of the original file content]